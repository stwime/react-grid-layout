fb8c0e455d5ee82a287e9d7b4fdfa733
"use strict";

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();
/* eslint-env jest */

/*:: import type { Layout } from "../../lib/utils.js"; */


var _utils = require("../../lib/utils.js");

var _powerAssert = require("power-assert");

var _powerAssert2 = _interopRequireDefault(_powerAssert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: declare function describe(name: string, fn: Function): void; */
/*:: declare function it(name: string, fn: Function): void; */

//
// Utils
//
function stripArray(arr) {
  return arr.map(stripObject);
}

function stripObject(obj) {
  obj = Object.assign({}, obj);
  return Object.keys(obj).reduce(function (memo, key) {
    if (obj[key] != null) memo[key] = obj[key];
    return memo;
  }, {});
}

function assertDeepEqualStrip(obj1, obj2) {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder();

  _powerAssert2.default.deepEqual(_rec._expr(_rec._capt(stripArray(_rec._capt(obj1, "arguments/0/arguments/0")), "arguments/0"), {
    content: "assert.deepEqual(stripArray(obj1), stripArray(obj2))",
    filepath: "test/spec/utils-test.js",
    line: 34
  }), _rec2._expr(_rec2._capt(stripArray(_rec2._capt(obj2, "arguments/1/arguments/0")), "arguments/1"), {
    content: "assert.deepEqual(stripArray(obj1), stripArray(obj2))",
    filepath: "test/spec/utils-test.js",
    line: 34
  }));
}
//
// Specs
//

describe("bottom", function () {
  it("Handles an empty layout as input", function () {
    var _rec3 = new _powerAssertRecorder();

    (0, _powerAssert2.default)(_rec3._expr(_rec3._capt(_rec3._capt((0, _utils.bottom)(_rec3._capt([], "arguments/0/left/arguments/0")), "arguments/0/left") === 0, "arguments/0"), {
      content: "assert(bottom([]) === 0)",
      filepath: "test/spec/utils-test.js",
      line: 42
    }));
  });

  it("Returns the bottom coordinate of the layout", function () {
    var _rec4 = new _powerAssertRecorder();

    (0, _powerAssert2.default)(_rec4._expr(_rec4._capt(_rec4._capt((0, _utils.bottom)(_rec4._capt([_rec4._capt({ i: "1", x: 0, y: 1, w: 1, h: 1 }, "arguments/0/left/arguments/0/elements/0"), _rec4._capt({ i: "2", x: 1, y: 2, w: 1, h: 1 }, "arguments/0/left/arguments/0/elements/1")], "arguments/0/left/arguments/0")), "arguments/0/left") === 3, "arguments/0"), {
      content: "assert(bottom([{ i: \"1\", x: 0, y: 1, w: 1, h: 1 }, { i: \"2\", x: 1, y: 2, w: 1, h: 1 }]) === 3)",
      filepath: "test/spec/utils-test.js",
      line: 46
    }));
  });
});

describe("sortLayoutItemsByRowCol", function () {
  it("should sort by top to bottom right", function () {
    var _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    var layout = [{ x: 1, y: 1, w: 1, h: 1, i: "2" }, { x: 1, y: 0, w: 1, h: 1, i: "1" }, { x: 0, y: 1, w: 2, h: 2, i: "3" }];
    _powerAssert2.default.deepEqual(_rec5._expr(_rec5._capt((0, _utils.sortLayoutItemsByRowCol)(_rec5._capt(layout, "arguments/0/arguments/0")), "arguments/0"), {
      content: "assert.deepEqual(sortLayoutItemsByRowCol(layout), [{ x: 1, y: 0, w: 1, h: 1, i: \"1\" }, { x: 0, y: 1, w: 2, h: 2, i: \"3\" }, { x: 1, y: 1, w: 1, h: 1, i: \"2\" }])",
      filepath: "test/spec/utils-test.js",
      line: 62
    }), _rec6._expr(_rec6._capt([_rec6._capt({ x: 1, y: 0, w: 1, h: 1, i: "1" }, "arguments/1/elements/0"), _rec6._capt({ x: 0, y: 1, w: 2, h: 2, i: "3" }, "arguments/1/elements/1"), _rec6._capt({ x: 1, y: 1, w: 1, h: 1, i: "2" }, "arguments/1/elements/2")], "arguments/1"), {
      content: "assert.deepEqual(sortLayoutItemsByRowCol(layout), [{ x: 1, y: 0, w: 1, h: 1, i: \"1\" }, { x: 0, y: 1, w: 2, h: 2, i: \"3\" }, { x: 1, y: 1, w: 1, h: 1, i: \"2\" }])",
      filepath: "test/spec/utils-test.js",
      line: 62
    }));
  });
});

describe("collides", function () {
  it("Returns whether the layout items collide", function () {
    var _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder();

    (0, _powerAssert2.default)(_rec7._expr(_rec7._capt(_rec7._capt((0, _utils.collides)(_rec7._capt({ i: "1", x: 0, y: 1, w: 1, h: 1 }, "arguments/0/left/arguments/0"), _rec7._capt({ i: "2", x: 1, y: 2, w: 1, h: 1 }, "arguments/0/left/arguments/1")), "arguments/0/left") === false, "arguments/0"), {
      content: "assert(collides({ i: \"1\", x: 0, y: 1, w: 1, h: 1 }, { i: \"2\", x: 1, y: 2, w: 1, h: 1 }) === false)",
      filepath: "test/spec/utils-test.js",
      line: 72
    }));
    (0, _powerAssert2.default)(_rec8._expr(_rec8._capt(_rec8._capt((0, _utils.collides)(_rec8._capt({ i: "1", x: 0, y: 1, w: 1, h: 1 }, "arguments/0/left/arguments/0"), _rec8._capt({ i: "2", x: 0, y: 1, w: 1, h: 1 }, "arguments/0/left/arguments/1")), "arguments/0/left") === true, "arguments/0"), {
      content: "assert(collides({ i: \"1\", x: 0, y: 1, w: 1, h: 1 }, { i: \"2\", x: 0, y: 1, w: 1, h: 1 }) === true)",
      filepath: "test/spec/utils-test.js",
      line: 78
    }));
  });
});

describe("validateLayout", function () {
  it("Validates an empty layout", function () {
    (0, _utils.validateLayout)([]);
  });
  it("Validates a populated layout", function () {
    (0, _utils.validateLayout)([{ i: "1", x: 0, y: 1, w: 1, h: 1 }, { i: "2", x: 1, y: 2, w: 1, h: 1 }]);
  });
  it("Throws errors on invalid input", function () {
    _powerAssert2.default.throws(function () {
      // $FlowFixMe: dynamic check
      (0, _utils.validateLayout)([{ i: "1", x: 0, y: 1, w: 1, h: 1 }, { i: "2", x: 1, y: 2, w: 1 }]);
    }, /layout\[1\]\.h must be a number!/i);
  });
});

describe("moveElement", function () {
  it("Does not change layout when colliding on no rearrangement mode", function () {
    var _rec9 = new _powerAssertRecorder(),
        _rec10 = new _powerAssertRecorder();

    var layout = [{ i: "1", x: 0, y: 1, w: 1, h: 1, moved: false }, { i: "2", x: 1, y: 2, w: 1, h: 1, moved: false }];
    var layoutItem = layout[0];
    _powerAssert2.default.deepEqual(_rec9._expr(_rec9._capt((0, _utils.moveElement)(_rec9._capt(layout, "arguments/0/arguments/0"), _rec9._capt(layoutItem, "arguments/0/arguments/1"), 1, 2, // x, y
    true, true, // isUserAction, preventCollision
    null, 2), "arguments/0"), {
      content: "assert.deepEqual(moveElement(layout, layoutItem, 1, 2, true, true, null, 2), [{ i: \"1\", x: 0, y: 1, w: 1, h: 1, moved: false }, { i: \"2\", x: 1, y: 2, w: 1, h: 1, moved: false }])",
      filepath: "test/spec/utils-test.js",
      line: 115
    }), _rec10._expr(_rec10._capt([_rec10._capt({ i: "1", x: 0, y: 1, w: 1, h: 1, moved: false }, "arguments/1/elements/0"), _rec10._capt({ i: "2", x: 1, y: 2, w: 1, h: 1, moved: false }, "arguments/1/elements/1")], "arguments/1"), {
      content: "assert.deepEqual(moveElement(layout, layoutItem, 1, 2, true, true, null, 2), [{ i: \"1\", x: 0, y: 1, w: 1, h: 1, moved: false }, { i: \"2\", x: 1, y: 2, w: 1, h: 1, moved: false }])",
      filepath: "test/spec/utils-test.js",
      line: 115
    }));
  });

  it("Does change layout when colliding in rearrangement mode", function () {
    var _rec11 = new _powerAssertRecorder(),
        _rec12 = new _powerAssertRecorder();

    var layout = [{ i: "1", x: 0, y: 0, w: 1, h: 1, moved: false }, { i: "2", x: 1, y: 0, w: 1, h: 1, moved: false }];
    var layoutItem = layout[0];
    _powerAssert2.default.deepEqual(_rec11._expr(_rec11._capt((0, _utils.moveElement)(_rec11._capt(layout, "arguments/0/arguments/0"), _rec11._capt(layoutItem, "arguments/0/arguments/1"), 1, 0, // x, y
    true, false, // isUserAction, preventCollision
    "vertical", 2 // compactType, cols
    ), "arguments/0"), {
      content: "assert.deepEqual(moveElement(layout, layoutItem, 1, 0, true, false, \"vertical\", 2), [{ i: \"1\", x: 1, y: 0, w: 1, h: 1, moved: true }, { i: \"2\", x: 1, y: 1, w: 1, h: 1, moved: true }])",
      filepath: "test/spec/utils-test.js",
      line: 139
    }), _rec12._expr(_rec12._capt([_rec12._capt({ i: "1", x: 1, y: 0, w: 1, h: 1, moved: true }, "arguments/1/elements/0"), _rec12._capt({ i: "2", x: 1, y: 1, w: 1, h: 1, moved: true }, "arguments/1/elements/1")], "arguments/1"), {
      content: "assert.deepEqual(moveElement(layout, layoutItem, 1, 0, true, false, \"vertical\", 2), [{ i: \"1\", x: 1, y: 0, w: 1, h: 1, moved: true }, { i: \"2\", x: 1, y: 1, w: 1, h: 1, moved: true }])",
      filepath: "test/spec/utils-test.js",
      line: 139
    }));
  });

  it("Moves elements out of the way without causing panel jumps when compaction is vertical", function () {
    var _rec13 = new _powerAssertRecorder(),
        _rec14 = new _powerAssertRecorder();

    var layout = [{ x: 0, y: 0, w: 1, h: 10, moved: false, i: "A" }, { x: 0, y: 10, w: 1, h: 1, moved: false, i: "B" }, { x: 0, y: 11, w: 1, h: 1, moved: false, i: "C" }];
    // move A down slightly so it collides with C; can cause C to jump above B.
    // We instead want B to jump above A (it has the room)
    var itemA = layout[0];
    _powerAssert2.default.deepEqual(_rec13._expr(_rec13._capt((0, _utils.moveElement)(_rec13._capt(layout, "arguments/0/arguments/0"), _rec13._capt(itemA, "arguments/0/arguments/1"), 0, 1, // x, y
    true, false, // isUserAction, preventCollision
    "vertical", 10 // compactType, cols
    ), "arguments/0"), {
      content: "assert.deepEqual(moveElement(layout, itemA, 0, 1, true, false, \"vertical\", 10), [{ x: 0, y: 1, w: 1, h: 10, moved: true, i: \"A\" }, { x: 0, y: 0, w: 1, h: 1, moved: true, i: \"B\" }, { x: 0, y: 11, w: 1, h: 1, moved: false, i: \"C\" }])",
      filepath: "test/spec/utils-test.js",
      line: 166
    }), _rec14._expr(_rec14._capt([_rec14._capt({ x: 0, y: 1, w: 1, h: 10, moved: true, i: "A" }, "arguments/1/elements/0"), _rec14._capt({ x: 0, y: 0, w: 1, h: 1, moved: true, i: "B" }, "arguments/1/elements/1"), _rec14._capt({ x: 0, y: 11, w: 1, h: 1, moved: false, i: "C" }, "arguments/1/elements/2")], "arguments/1"), {
      content: "assert.deepEqual(moveElement(layout, itemA, 0, 1, true, false, \"vertical\", 10), [{ x: 0, y: 1, w: 1, h: 10, moved: true, i: \"A\" }, { x: 0, y: 0, w: 1, h: 1, moved: true, i: \"B\" }, { x: 0, y: 11, w: 1, h: 1, moved: false, i: \"C\" }])",
      filepath: "test/spec/utils-test.js",
      line: 166
    }));
  });

  it("Calculates the correct collision when moving large object far", function () {
    var _rec15 = new _powerAssertRecorder(),
        _rec16 = new _powerAssertRecorder();

    var layout = [{ x: 0, y: 0, w: 1, h: 10, moved: false, i: "A" }, { x: 0, y: 10, w: 1, h: 1, moved: false, i: "B" }, { x: 0, y: 11, w: 1, h: 1, moved: false, i: "C" }];
    // Move A down by 2. This should move B above, but since we don't compact in between,
    // C should move below.
    var itemA = layout[0];
    _powerAssert2.default.deepEqual(_rec15._expr(_rec15._capt((0, _utils.moveElement)(_rec15._capt(layout, "arguments/0/arguments/0"), _rec15._capt(itemA, "arguments/0/arguments/1"), 0, 2, // x, y
    true, false, // isUserAction, preventCollision
    "vertical", 10 // compactType, cols
    ), "arguments/0"), {
      content: "assert.deepEqual(moveElement(layout, itemA, 0, 2, true, false, \"vertical\", 10), [{ x: 0, y: 2, w: 1, h: 10, moved: true, i: \"A\" }, { x: 0, y: 1, w: 1, h: 1, moved: true, i: \"B\" }, { x: 0, y: 12, w: 1, h: 1, moved: true, i: \"C\" }])",
      filepath: "test/spec/utils-test.js",
      line: 194
    }), _rec16._expr(_rec16._capt([_rec16._capt({ x: 0, y: 2, w: 1, h: 10, moved: true, i: "A" }, "arguments/1/elements/0"), _rec16._capt({ x: 0, y: 1, w: 1, h: 1, moved: true, i: "B" }, "arguments/1/elements/1"), _rec16._capt({ x: 0, y: 12, w: 1, h: 1, moved: true, i: "C" }, "arguments/1/elements/2")], "arguments/1"), {
      content: "assert.deepEqual(moveElement(layout, itemA, 0, 2, true, false, \"vertical\", 10), [{ x: 0, y: 2, w: 1, h: 10, moved: true, i: \"A\" }, { x: 0, y: 1, w: 1, h: 1, moved: true, i: \"B\" }, { x: 0, y: 12, w: 1, h: 1, moved: true, i: \"C\" }])",
      filepath: "test/spec/utils-test.js",
      line: 194
    }));
  });

  it("Moves elements out of the way without causing panel jumps when compaction is vertical (example case 13)", function () {
    var _rec17 = new _powerAssertRecorder(),
        _rec18 = new _powerAssertRecorder();

    var layout = [{ x: 0, y: 0, w: 1, h: 1, i: "A" }, { x: 1, y: 0, w: 1, h: 1, i: "B" }, { x: 0, y: 1, w: 2, h: 2, i: "C" }];
    // move A over slightly so it collides with B; can cause C to jump above B
    // this test will check that that does not happen
    var itemA = layout[0];
    _powerAssert2.default.deepEqual(_rec17._expr(_rec17._capt((0, _utils.moveElement)(_rec17._capt(layout, "arguments/0/arguments/0"), _rec17._capt(itemA, "arguments/0/arguments/1"), 1, 0, // x, y
    true, false, // isUserAction, preventCollision
    "vertical", 2 // compactType, cols
    ), "arguments/0"), {
      content: "assert.deepEqual(moveElement(layout, itemA, 1, 0, true, false, \"vertical\", 2), [{ x: 1, y: 0, w: 1, h: 1, i: \"A\", moved: true }, { x: 1, y: 1, w: 1, h: 1, i: \"B\", moved: true }, { x: 0, y: 2, w: 2, h: 2, i: \"C\", moved: true }])",
      filepath: "test/spec/utils-test.js",
      line: 222
    }), _rec18._expr(_rec18._capt([_rec18._capt({ x: 1, y: 0, w: 1, h: 1, i: "A", moved: true }, "arguments/1/elements/0"), _rec18._capt({ x: 1, y: 1, w: 1, h: 1, i: "B", moved: true }, "arguments/1/elements/1"), _rec18._capt({ x: 0, y: 2, w: 2, h: 2, i: "C", moved: true }, "arguments/1/elements/2")], "arguments/1"), {
      content: "assert.deepEqual(moveElement(layout, itemA, 1, 0, true, false, \"vertical\", 2), [{ x: 1, y: 0, w: 1, h: 1, i: \"A\", moved: true }, { x: 1, y: 1, w: 1, h: 1, i: \"B\", moved: true }, { x: 0, y: 2, w: 2, h: 2, i: \"C\", moved: true }])",
      filepath: "test/spec/utils-test.js",
      line: 222
    }));
  });

  it("Moves elements out of the way without causing panel jumps when compaction is horizontal", function () {
    var _rec19 = new _powerAssertRecorder(),
        _rec20 = new _powerAssertRecorder();

    var layout = [{ y: 0, x: 0, h: 1, w: 10, moved: false, i: "A" }, { y: 0, x: 11, h: 1, w: 1, moved: false, i: "B" }, { y: 0, x: 12, h: 1, w: 1, moved: false, i: "C" }];
    // move A over slightly so it collides with C; can cause C to jump left of B
    // this test will check that that does not happen
    var itemA = layout[0];
    _powerAssert2.default.deepEqual(_rec19._expr(_rec19._capt((0, _utils.moveElement)(_rec19._capt(layout, "arguments/0/arguments/0"), _rec19._capt(itemA, "arguments/0/arguments/1"), 2, 0, // x, y
    true, false, // isUserAction, preventCollision
    "horizontal", 10 // compactType, cols
    ), "arguments/0"), {
      content: "assert.deepEqual(moveElement(layout, itemA, 2, 0, true, false, \"horizontal\", 10), [{ y: 0, x: 2, h: 1, w: 10, moved: true, i: \"A\" }, { y: 0, x: 1, h: 1, w: 1, moved: true, i: \"B\" }, { y: 0, x: 12, h: 1, w: 1, moved: false, i: \"C\" }])",
      filepath: "test/spec/utils-test.js",
      line: 250
    }), _rec20._expr(_rec20._capt([_rec20._capt({ y: 0, x: 2, h: 1, w: 10, moved: true, i: "A" }, "arguments/1/elements/0"), _rec20._capt({ y: 0, x: 1, h: 1, w: 1, moved: true, i: "B" }, "arguments/1/elements/1"), _rec20._capt({ y: 0, x: 12, h: 1, w: 1, moved: false, i: "C" }, "arguments/1/elements/2")], "arguments/1"), {
      content: "assert.deepEqual(moveElement(layout, itemA, 2, 0, true, false, \"horizontal\", 10), [{ y: 0, x: 2, h: 1, w: 10, moved: true, i: \"A\" }, { y: 0, x: 1, h: 1, w: 1, moved: true, i: \"B\" }, { y: 0, x: 12, h: 1, w: 1, moved: false, i: \"C\" }])",
      filepath: "test/spec/utils-test.js",
      line: 250
    }));
  });
});

describe("compact vertical", function () {
  it("Removes empty vertical space above item", function () {
    var layout = [{ i: "1", x: 0, y: 1, w: 1, h: 1 }];
    assertDeepEqualStrip((0, _utils.compact)(layout, "vertical", 10), [{ i: "1", x: 0, y: 0, w: 1, h: 1, moved: false, static: false }]);
  });

  it("Resolve collision by moving item further down in array", function () {
    var layout = [{ x: 0, y: 0, w: 1, h: 5, i: "1" }, { x: 0, y: 1, w: 1, h: 1, i: "2" }];
    assertDeepEqualStrip((0, _utils.compact)(layout, "vertical", 10), [{ x: 0, y: 0, w: 1, h: 5, i: "1", moved: false, static: false }, { x: 0, y: 5, w: 1, h: 1, i: "2", moved: false, static: false }]);
  });

  it("Handles recursive collision by moving new collisions out of the way before moving item down", function () {
    var layout = [{ x: 0, y: 0, w: 2, h: 5, i: "1" }, { x: 0, y: 0, w: 10, h: 1, i: "2" }, { x: 5, y: 1, w: 1, h: 1, i: "3" }, { x: 5, y: 2, w: 1, h: 1, i: "4" }, { x: 5, y: 3, w: 1, h: 1, i: "5", static: true }];

    assertDeepEqualStrip((0, _utils.compact)(layout, "vertical", 10), [{ x: 0, y: 0, w: 2, h: 5, i: "1", moved: false, static: false }, { x: 0, y: 5, w: 10, h: 1, i: "2", moved: false, static: false }, { x: 5, y: 6, w: 1, h: 1, i: "3", moved: false, static: false }, { x: 5, y: 7, w: 1, h: 1, i: "4", moved: false, static: false }, { x: 5, y: 3, w: 1, h: 1, i: "5", moved: false, static: true }]);
  });

  it("Clones layout items (does not modify input)", function () {
    var layout = [{ x: 0, y: 0, w: 2, h: 5, i: "1" }, { x: 0, y: 0, w: 10, h: 1, i: "2" }];
    var out = (0, _utils.compact)(layout, "vertical", 10);
    layout.forEach(function (item) {
      var _rec21 = new _powerAssertRecorder();

      (0, _powerAssert2.default)(_rec21._expr(_rec21._capt(!_rec21._capt(_rec21._capt(out, "arguments/0/argument/callee/object").includes(_rec21._capt(item, "arguments/0/argument/arguments/0")), "arguments/0/argument"), "arguments/0"), {
        content: "assert(!out.includes(item))",
        filepath: "test/spec/utils-test.js",
        line: 314
      }));
    });
  });
});

describe("compact horizontal", function () {
  it("compact horizontal should remove empty horizontal space to left of item", function () {
    var layout = [{ x: 5, y: 5, w: 1, h: 1, i: "1" }];
    assertDeepEqualStrip((0, _utils.compact)(layout, "horizontal", 10), [{ x: 0, y: 0, w: 1, h: 1, i: "1", moved: false, static: false }]);
  });

  it("Resolve collision by moving item further to the right in array", function () {
    var layout = [{ y: 0, x: 0, h: 1, w: 5, i: "1" }, { y: 0, x: 1, h: 1, w: 1, i: "2" }];
    assertDeepEqualStrip((0, _utils.compact)(layout, "horizontal", 10), [{ y: 0, x: 0, h: 1, w: 5, i: "1", moved: false, static: false }, { y: 0, x: 5, h: 1, w: 1, i: "2", moved: false, static: false }]);
  });

  it("Handles recursive collision by moving new collisions out of the way before moving item to the right", function () {
    var layout = [{ y: 0, x: 0, h: 2, w: 5, i: "1" }, { y: 0, x: 0, h: 10, w: 1, i: "2" }, { y: 5, x: 1, h: 1, w: 1, i: "3" }, { y: 5, x: 2, h: 1, w: 1, i: "4" }, { y: 5, x: 2, h: 1, w: 1, i: "5", static: true }];
    assertDeepEqualStrip((0, _utils.compact)(layout, "horizontal", 10), [{ y: 0, x: 0, h: 2, w: 5, i: "1", moved: false, static: false }, { y: 0, x: 5, h: 10, w: 1, i: "2", moved: false, static: false }, { y: 5, x: 6, h: 1, w: 1, i: "3", moved: false, static: false }, { y: 5, x: 7, h: 1, w: 1, i: "4", moved: false, static: false }, { y: 5, x: 2, h: 1, w: 1, i: "5", moved: false, static: true }]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,